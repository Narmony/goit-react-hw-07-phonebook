{"version":3,"sources":["components/ContactsForm/contactsForm.module.css","components/Filter/filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactsForm/ContactsForm.jsx","redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactsList/contactsList.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","contactId","delete","ContactsForm","state","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","onSubmit","props","reset","this","className","styles","form","htmlFor","name_input","onChange","id","type","pattern","title","required","number_input","add_Btn","Component","connect","getFilter","contacts","filter","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","loading","contactSelectors","onDelete","contacts_block","contacts_title","map","contact_item","onClick","contactsActions","target","searchWrap","App","isLoadingContacts","contactsSelectors","createReducer","payload","alert","checkName","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b4d05dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactsForm_form__2v-iC\",\"add_Btn\":\"contactsForm_add_Btn__2YOYD\",\"name_input\":\"contactsForm_name_input__3gjZp\",\"number_input\":\"contactsForm_number_input__4ztsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrap\":\"filter_searchWrap__3TG7j\",\"title\":\"filter_title__212N-\"};","// import { v4 as uuidv4 } from 'uuid';\n\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactError');\n\n\n\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// export default { addContactRequest, addContactSuccess, addContactError, deleteContact, changeFilter };\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact =\n  ({ name, number }) =>\n  async dispatch => {\n    const contact = { name, number };\n\n    dispatch(addContactRequest());\n\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      dispatch(addContactSuccess(data));\n    } catch (error) {\n      dispatch(addContactError(error));\n    }\n  };\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\nconst contactsOperations = { fetchContacts, addContact, deleteContact };\nexport default contactsOperations;\n","import styles from './contactsForm.module.css';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n    // this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>Phonebook</h2>\n        <div className={styles.form}>\n          <label htmlFor={this.nameInputId} className={styles.name_input}>\n            <span>Name</span>\n            <input\n              onChange={this.handleChange}\n              id={this.nameInputId}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label htmlFor={this.numberInputId} className={styles.number_input}>\n            <span>Number</span>\n            <input\n              onChange={this.handleChange}\n              id={this.numberInputId}\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n            <button type=\"submit\" className={styles.add_Btn}>\n              Add contact\n            </button>\n          </label>\n        </div>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  initialState: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(contactsOperations.addContact(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactsForm);\n","import {createSelector} from '@reduxjs/toolkit';\n \n const getLoading = state => state.contacts.loading;\n\n\n const getAllContacts = (state) => state.contacts.contacts;\n\n const getFilter = (state) => state.contacts.filter;\n\n// export const getVisibleContacts = state =>{\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return (allContacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     ));\n// }\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n    getLoading,\n    getFilter,\n    // getVisibleContacts,\n\n}\n\n// export const getVisibleContacts = state => {\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n//      return allContacts.filter(({ name }) =>\n//        name.toLowerCase().includes(normalizedFilter)\n//      );\n\n// }\n","import styles from './contactsList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport * as contactSelectors from '../../redux/contacts/contacts-selectors';\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div className={styles.contacts_block}>\n      <span className={styles.contacts_title}>Contacts:</span>\n      <ul>\n        {contacts.map(({ name, number, id }) => (\n          <li className={styles.contact_item} key={id}>\n            <span className={styles.name}>{name}</span>\n            <span className={styles.number}>{number}</span>\n            <button onClick={() => onDelete(id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLocaleLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { contacts, filter } }) => ({\n//   contacts: getVisibleContacts(contacts, filter),\n// });\n\nconst mapStateToProps = (state) => ({\n  contacts: contactSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import styles from './filter.module.css';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport contactSelectors from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.searchWrap}>\n    <span className={styles.title}>Find contacts by name:</span>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactSelectors.getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactsForm from './components/ContactsForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport contactsOperations from './redux/contacts/contacts-operations';\nimport contactsSelectors from './redux/contacts/contacts-selectors';\nimport './styles.css';\n// import { v4 as uuidv4 } from 'uuid';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <ContactsForm />\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <Filter />\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError\n} from './contacts-actions';\n\n\nconst checkName = (state, { payload }) => {\n  const checkedName = state.map(contact => contact.name).includes(payload.name);\n  if (checkedName) {\n    alert(`${payload.name} is already in contacts`);\n    return;\n  }\n  return [...state, payload];\n};\n\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (state, {payload})=>payload,\n  [addContactSuccess]: (state, { payload }) => checkName(state, { payload }),\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n// const error => createReducer(null, {\n\n// })\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"contactsList_name__3OkeU\",\"contacts_block\":\"contactsList_contacts_block__15lQl\",\"contact_item\":\"contactsList_contact_item__1N_G3\",\"contacts_title\":\"contactsList_contacts_title__3Kxou\"};"],"sourceRoot":""}